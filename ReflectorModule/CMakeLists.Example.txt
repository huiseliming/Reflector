cmake_minimum_required (VERSION 3.20)
project(Example LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)

if(WIN32)
    # set windows export symbols(spawn .lib)
    add_compile_options(/MP)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()

file(GLOB_RECURSE Header Include/*.h)
file(GLOB_RECURSE Source Source/*.cpp)
file(GLOB_RECURSE Reflect Reflect/*.cpp)

add_executable(Example
    ${Reflect}
    ${Header}
    ${Source})

target_include_directories(Example PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
    $<INSTALL_INTERFACE:Include>    #${CMAKE_INSTALL_PREFIX}/include
    )

target_include_directories(Example PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Reflect)

foreach(SourceFile ${Source})
    set(SourceFileInput ${SourceFileInput} ${SourceFile})    
endforeach()

get_target_property(CompileDefinitions Example COMPILE_DEFINITIONS)
if(CompileDefinitions)
    foreach(CompileDefine ${CompileDefinitions})
        set(CompileDefinitionsInput ${CompileDefinitionsInput} -D${CompileDefine})
    endforeach()
endif()
set(CompileDefinitionsInput ${CompileDefinitionsInput} -D__REFLECTOR__)

get_target_property(IncludeDirectories Example INCLUDE_DIRECTORIES)
foreach(IncludeDirectory ${IncludeDirectories})
    set(IncludeDirectoryInput ${IncludeDirectoryInput} $<$<BOOL:${IncludeDirectory}>:-I${IncludeDirectory}>) 
endforeach()

set(ReflectorExecutor ${PROJECT_SOURCE_DIR}/Binary/Reflector.exe)
set(ReflectorExecuteCommand 
    ${ReflectorExecutor} 
    ${SourceFileInput}
    -- -std=c++20 ${CompileDefinitionsInput} ${IncludeDirectoryInput})


message("----------ReflectorCommand----------")
message(${ReflectorExecuteCommand})
message("------------------------------------")
#execute_process(COMMAND ${MetadataGeneratorCommand})

message(${PROJECT_SOURCE_DIR})
add_custom_target (ExampleReflector)
add_custom_command(TARGET ExampleReflector 
    COMMAND ${ReflectorExecuteCommand}
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/Reflect
)

#add_custom_command(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Reflector.txt COMMAND ${ReflectorExecuteCommand} WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/Reflect)
#add_custom_target(TestsReflector DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/Reflector.txt)

#add_dependencies(Tests TestsReflector)