cmake_minimum_required (VERSION 3.20)
project(Example LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

#set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_LIBRARY_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib)
#set(CMAKE_RUNTIME_OUTPUT_DIRECTORY        ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin)

if(WIN32)
    # set windows export symbols(spawn .lib)
    add_compile_options(/MP)
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
endif()

file(GLOB_RECURSE Header Include/*.h)
file(GLOB_RECURSE Source Source/*.cpp)
file(GLOB_RECURSE Reflect Reflect/*.cpp)

add_executable(Example
    ${Reflect}
    ${Header}
    ${Source})

target_include_directories(Example PUBLIC
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/Include>
    $<INSTALL_INTERFACE:Include>    #${CMAKE_INSTALL_PREFIX}/include
    )

target_include_directories(Example PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Reflect)

foreach(SourceFile ${Source})
    set(SourceFileInput "${SourceFileInput} ${SourceFile}")
endforeach()

set(ReflectorExecutor Reflector.exe)
set(ReflectorExecuteCommand "${ReflectorExecutor} -p ${PROJECT_BINARY_DIR} ${SourceFileInput}")

file(GENERATE OUTPUT "${PROJECT_SOURCE_DIR}/Scripts/reflector.bat"
    CONTENT "cd ${PROJECT_SOURCE_DIR}/Reflect && ${ReflectorExecuteCommand}")